/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.kafka.dto;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class AvroMessage extends org.apache.avro.specific.SpecificRecordBase implements
    org.apache.avro.specific.SpecificRecord {

  private static final long serialVersionUID = -7701321600712539322L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(
      "{\"type\":\"record\",\"name\":\"AvroMessage\",\"namespace\":\"com.kafka.dto\",\"fields\":[{\"name\":\"messageContent\",\"type\":\"string\"},{\"name\":\"messageId\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"int\"}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroMessage> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroMessage> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AvroMessage> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AvroMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AvroMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AvroMessage to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AvroMessage from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AvroMessage instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AvroMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence messageContent;
  private java.lang.CharSequence messageId;
  private int age;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroMessage() {
  }

  /**
   * All-args constructor.
   * @param messageContent The new value for messageContent
   * @param messageId The new value for messageId
   * @param age The new value for age
   */
  public AvroMessage(java.lang.CharSequence messageContent, java.lang.CharSequence messageId,
      java.lang.Integer age) {
    this.messageContent = messageContent;
    this.messageId = messageId;
    this.age = age;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() {
    return MODEL$;
  }

  @Override
  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return messageContent;
      case 1:
        return messageId;
      case 2:
        return age;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        messageContent = (java.lang.CharSequence) value$;
        break;
      case 1:
        messageId = (java.lang.CharSequence) value$;
        break;
      case 2:
        age = (java.lang.Integer) value$;
        break;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'messageContent' field.
   * @return The value of the 'messageContent' field.
   */
  public java.lang.CharSequence getMessageContent() {
    return messageContent;
  }


  /**
   * Sets the value of the 'messageContent' field.
   * @param value the value to set.
   */
  public void setMessageContent(java.lang.CharSequence value) {
    this.messageContent = value;
  }

  /**
   * Gets the value of the 'messageId' field.
   * @return The value of the 'messageId' field.
   */
  public java.lang.CharSequence getMessageId() {
    return messageId;
  }


  /**
   * Sets the value of the 'messageId' field.
   * @param value the value to set.
   */
  public void setMessageId(java.lang.CharSequence value) {
    this.messageId = value;
  }

  /**
   * Gets the value of the 'age' field.
   * @return The value of the 'age' field.
   */
  public int getAge() {
    return age;
  }


  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(int value) {
    this.age = value;
  }

  /**
   * Creates a new AvroMessage RecordBuilder.
   * @return A new AvroMessage RecordBuilder
   */
  public static com.kafka.dto.AvroMessage.Builder newBuilder() {
    return new com.kafka.dto.AvroMessage.Builder();
  }

  /**
   * Creates a new AvroMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroMessage RecordBuilder
   */
  public static com.kafka.dto.AvroMessage.Builder newBuilder(
      com.kafka.dto.AvroMessage.Builder other) {
    if (other == null) {
      return new com.kafka.dto.AvroMessage.Builder();
    } else {
      return new com.kafka.dto.AvroMessage.Builder(other);
    }
  }

  /**
   * Creates a new AvroMessage RecordBuilder by copying an existing AvroMessage instance.
   * @param other The existing instance to copy.
   * @return A new AvroMessage RecordBuilder
   */
  public static com.kafka.dto.AvroMessage.Builder newBuilder(com.kafka.dto.AvroMessage other) {
    if (other == null) {
      return new com.kafka.dto.AvroMessage.Builder();
    } else {
      return new com.kafka.dto.AvroMessage.Builder(other);
    }
  }

  /**
   * RecordBuilder for AvroMessage instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends
      org.apache.avro.specific.SpecificRecordBuilderBase<AvroMessage>
      implements org.apache.avro.data.RecordBuilder<AvroMessage> {

    private java.lang.CharSequence messageContent;
    private java.lang.CharSequence messageId;
    private int age;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.kafka.dto.AvroMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.messageContent)) {
        this.messageContent = data().deepCopy(fields()[0].schema(), other.messageContent);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.messageId)) {
        this.messageId = data().deepCopy(fields()[1].schema(), other.messageId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.age)) {
        this.age = data().deepCopy(fields()[2].schema(), other.age);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing AvroMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(com.kafka.dto.AvroMessage other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.messageContent)) {
        this.messageContent = data().deepCopy(fields()[0].schema(), other.messageContent);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.messageId)) {
        this.messageId = data().deepCopy(fields()[1].schema(), other.messageId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.age)) {
        this.age = data().deepCopy(fields()[2].schema(), other.age);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Gets the value of the 'messageContent' field.
     * @return The value.
     */
    public java.lang.CharSequence getMessageContent() {
      return messageContent;
    }


    /**
     * Sets the value of the 'messageContent' field.
     * @param value The value of 'messageContent'.
     * @return This builder.
     */
    public com.kafka.dto.AvroMessage.Builder setMessageContent(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.messageContent = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'messageContent' field has been set.
     * @return True if the 'messageContent' field has been set, false otherwise.
     */
    public boolean hasMessageContent() {
      return fieldSetFlags()[0];
    }


    /**
     * Clears the value of the 'messageContent' field.
     * @return This builder.
     */
    public com.kafka.dto.AvroMessage.Builder clearMessageContent() {
      messageContent = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'messageId' field.
     * @return The value.
     */
    public java.lang.CharSequence getMessageId() {
      return messageId;
    }


    /**
     * Sets the value of the 'messageId' field.
     * @param value The value of 'messageId'.
     * @return This builder.
     */
    public com.kafka.dto.AvroMessage.Builder setMessageId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.messageId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'messageId' field has been set.
     * @return True if the 'messageId' field has been set, false otherwise.
     */
    public boolean hasMessageId() {
      return fieldSetFlags()[1];
    }


    /**
     * Clears the value of the 'messageId' field.
     * @return This builder.
     */
    public com.kafka.dto.AvroMessage.Builder clearMessageId() {
      messageId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'age' field.
     * @return The value.
     */
    public int getAge() {
      return age;
    }


    /**
     * Sets the value of the 'age' field.
     * @param value The value of 'age'.
     * @return This builder.
     */
    public com.kafka.dto.AvroMessage.Builder setAge(int value) {
      validate(fields()[2], value);
      this.age = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'age' field has been set.
     * @return True if the 'age' field has been set, false otherwise.
     */
    public boolean hasAge() {
      return fieldSetFlags()[2];
    }


    /**
     * Clears the value of the 'age' field.
     * @return This builder.
     */
    public com.kafka.dto.AvroMessage.Builder clearAge() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroMessage build() {
      try {
        AvroMessage record = new AvroMessage();
        record.messageContent = fieldSetFlags()[0] ? this.messageContent
            : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.messageId = fieldSetFlags()[1] ? this.messageId
            : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.age = fieldSetFlags()[2] ? this.age : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroMessage>
      WRITER$ = (org.apache.avro.io.DatumWriter<AvroMessage>) MODEL$.createDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out)
      throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroMessage>
      READER$ = (org.apache.avro.io.DatumReader<AvroMessage>) MODEL$.createDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in)
      throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override
  protected boolean hasCustomCoders() {
    return true;
  }

  @Override
  public void customEncode(org.apache.avro.io.Encoder out)
      throws java.io.IOException {
    out.writeString(this.messageContent);

    out.writeString(this.messageId);

    out.writeInt(this.age);

  }

  @Override
  public void customDecode(org.apache.avro.io.ResolvingDecoder in)
      throws java.io.IOException {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.messageContent = in.readString(
          this.messageContent instanceof Utf8 ? (Utf8) this.messageContent : null);

      this.messageId = in.readString(this.messageId instanceof Utf8 ? (Utf8) this.messageId : null);

      this.age = in.readInt();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
          case 0:
            this.messageContent = in.readString(
                this.messageContent instanceof Utf8 ? (Utf8) this.messageContent : null);
            break;

          case 1:
            this.messageId = in.readString(
                this.messageId instanceof Utf8 ? (Utf8) this.messageId : null);
            break;

          case 2:
            this.age = in.readInt();
            break;

          default:
            throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










